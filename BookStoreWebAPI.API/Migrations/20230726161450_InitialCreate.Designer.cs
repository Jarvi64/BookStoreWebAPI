// <auto-generated />
using System;
using BookStoreWebAPI.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;#nullable disablenamespace BookStoreWebAPI.API.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20230726161450_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);            modelBuilder.Entity("BookStoreWebAPI.API.Models.Domain.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");                    b.HasKey("AuthorId");                    b.ToTable("Authors");
                });            modelBuilder.Entity("BookStoreWebAPI.API.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");                    b.Property<double>("Price")
                        .HasColumnType("float");                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");                    b.HasKey("Id");                    b.HasIndex("AuthorId");                    b.HasIndex("GenreId");                    b.ToTable("Books");
                });            modelBuilder.Entity("BookStoreWebAPI.API.Models.Domain.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");                    b.HasKey("GenreId");                    b.ToTable("Genres");
                });            modelBuilder.Entity("BookStoreWebAPI.API.Models.Domain.Book", b =>
                {
                    b.HasOne("BookStoreWebAPI.API.Models.Domain.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();                    b.HasOne("BookStoreWebAPI.API.Models.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();                    b.Navigation("Author");                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
